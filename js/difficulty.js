/**
 * –°–∏—Å—Ç–µ–º–∞ —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –¥–ª—è —á–∞—Ç-–≥—Ä–∏
 */

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
const difficultyLevels = {
  easy: {
    id: "easy",
    name: "–õ–µ–≥–∫–∏–π",
    description: "–ë—ñ–ª—å—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –ø—Ä–æ—Å—Ç—ñ—à—ñ —É–º–æ–≤–∏ –ø–µ—Ä–µ–º–æ–≥–∏",
    messageCount: 15,
    victoryThreshold: 0.75, // –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–Ω–∏–∂–µ–Ω–Ω—è –ø–æ—Ä–æ–≥—É –¥–ª—è –ø–µ—Ä–µ–º–æ–≥–∏
    icon: "üü¢",
  },
  normal: {
    id: "normal",
    name: "–°–µ—Ä–µ–¥–Ω—ñ–π",
    description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–µ–∂–∏–º –≥—Ä–∏",
    messageCount: 10,
    victoryThreshold: 1, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–æ—Ä—ñ–≥
    icon: "üü°",
  },
  hard: {
    id: "hard",
    name: "–°–∫–ª–∞–¥–Ω–∏–π",
    description: "–ú–µ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —Å–∫–ª–∞–¥–Ω—ñ—à—ñ —É–º–æ–≤–∏ –ø–µ—Ä–µ–º–æ–≥–∏",
    messageCount: 7,
    victoryThreshold: 1.25, // –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø–æ—Ä–æ–≥—É –¥–ª—è –ø–µ—Ä–µ–º–æ–≥–∏
    icon: "üî¥",
  },
  expert: {
    id: "expert",
    name: "–ï–∫—Å–ø–µ—Ä—Ç",
    description: "–ú—ñ–Ω—ñ–º—É–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å",
    messageCount: 5,
    victoryThreshold: 1.5, // –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø–æ—Ä–æ–≥—É –¥–ª—è –ø–µ—Ä–µ–º–æ–≥–∏
    icon: "‚≠ê",
    locked: true, // –ü–æ—á–∞—Ç–∫–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
    unlockRequirement: "completionist", // –ü–æ—Ç—Ä—ñ–±–Ω–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è
  },
};

// –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Å–µ—Ä–µ–¥–Ω—ñ–π)
let currentDifficulty = "normal";

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
window.currentDifficulty = currentDifficulty;
window.difficultyLevels = difficultyLevels;

// –ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä—ñ–≤–Ω—è–º–∏ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
class DifficultyManager {
  constructor() {
    this.storage = "chatGameDifficulty";
    this.loadDifficultySettings();
    this.attachEventListeners();
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
  loadDifficultySettings() {
    const savedSettings = localStorage.getItem(this.storage);
    if (savedSettings) {
      const settings = JSON.parse(savedSettings);
      this.setDifficulty(settings.currentDifficulty || "normal");

      // –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ, —è–∫—â–æ —î
      if (settings.unlockedLevels) {
        settings.unlockedLevels.forEach((levelId) => {
          if (difficultyLevels[levelId]) {
            difficultyLevels[levelId].locked = false;
          }
        });
      }
    }
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –≤ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
  saveDifficultySettings() {
    // –ó–±–∏—Ä–∞—î–º–æ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω—ñ —Ä—ñ–≤–Ω—ñ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    const unlockedLevels = Object.keys(difficultyLevels).filter(
      (levelId) => !difficultyLevels[levelId].locked
    );

    const settings = {
      currentDifficulty,
      unlockedLevels,
    };

    localStorage.setItem(this.storage, JSON.stringify(settings));
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  setDifficulty(difficultyId) {
    if (
      difficultyLevels[difficultyId] &&
      !difficultyLevels[difficultyId].locked
    ) {
      currentDifficulty = difficultyId;
      window.currentDifficulty = currentDifficulty;

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤—Å—ñ—Ö —á–∞—Ç—ñ–≤
      this.updateMessageCounts();

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
      this.updateDifficultyDisplay();

      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
      this.saveDifficultySettings();

      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—ñ—ó –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
      const event = new CustomEvent("chatGame.difficultyChanged", {
        detail: { difficulty: difficultyId },
      });
      document.dispatchEvent(event);

      return true;
    }
    return false;
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤—Å—ñ—Ö —á–∞—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  updateMessageCounts() {
    const difficulty = difficultyLevels[currentDifficulty];
    if (!difficulty) return;

    const newMessageCount = difficulty.messageCount;

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —á–∞—Ç—ñ–≤
    Object.keys(chatBots).forEach((botId) => {
      // –Ø–∫—â–æ —á–∞—Ç —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞—Ç–æ –∞–±–æ —Å–∫–∏–Ω—É—Ç–æ
      if (chatBots[botId].memory.length <= 1) {
        chatBots[botId].messageCount = newMessageCount;

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        const botElement = document.getElementById(botId);
        if (botElement) {
          const counter = botElement.querySelector(".message-counter");
          if (counter) {
            counter.textContent = `–ó–∞–ª–∏—à–∏–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: ${newMessageCount}/${newMessageCount}`;
          }
        }
      }
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ MAX_MESSAGES –¥–ª—è –Ω–æ–≤–∏—Ö —á–∞—Ç—ñ–≤
    window.MAX_MESSAGES = newMessageCount;
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  updateDifficultyDisplay() {
    const difficultySelector = document.querySelector(".difficulty-selector");
    if (difficultySelector) {
      const buttons = difficultySelector.querySelectorAll(".difficulty-btn");
      buttons.forEach((button) => {
        const difficultyId = button.getAttribute("data-difficulty");

        if (difficultyId === currentDifficulty) {
          button.classList.add("active");
        } else {
          button.classList.remove("active");
        }
      });
    }
  }

  // –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  unlockDifficulty(difficultyId) {
    if (
      difficultyLevels[difficultyId] &&
      difficultyLevels[difficultyId].locked
    ) {
      difficultyLevels[difficultyId].locked = false;

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
      this.updateDifficultyButtons();

      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
      this.saveDifficultySettings();

      return true;
    }
    return false;
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  createDifficultySelector() {
    const container = document.createElement("div");
    container.className = "difficulty-selector";

    const difficultyLabel = document.createElement("span");
    difficultyLabel.className = "difficulty-label";
    difficultyLabel.textContent = "–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:";

    const buttonContainer = document.createElement("div");
    buttonContainer.className = "difficulty-buttons";

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    Object.values(difficultyLevels).forEach((difficulty) => {
      const button = document.createElement("button");
      button.className = `difficulty-btn ${
        difficulty.locked ? "difficulty-locked" : ""
      }`;
      button.setAttribute("data-difficulty", difficulty.id);
      button.setAttribute(
        "title",
        `${difficulty.name}: ${difficulty.description}`
      );

      // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∞—Å—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
      if (difficulty.id === currentDifficulty) {
        button.classList.add("active");
      }

      button.innerHTML = `${difficulty.icon} ${difficulty.name}`;

      // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
      button.addEventListener("click", () => {
        if (!difficulty.locked) {
          this.setDifficulty(difficulty.id);
        } else {
          // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è
          if (difficulty.unlockRequirement) {
            const requirementName =
              achievementsConfig[difficulty.unlockRequirement]?.title ||
              "–ø–µ–≤–Ω–æ–≥–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è";
            alert(
              `–î–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É "${difficulty.name}" –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è "${requirementName}"`
            );
          }
        }
      });

      buttonContainer.appendChild(button);
    });

    container.appendChild(difficultyLabel);
    container.appendChild(buttonContainer);

    return container;
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  updateDifficultyButtons() {
    const selector = document.querySelector(".difficulty-selector");
    if (!selector) return;

    const buttons = selector.querySelectorAll(".difficulty-btn");
    buttons.forEach((button) => {
      const difficultyId = button.getAttribute("data-difficulty");
      const difficulty = difficultyLevels[difficultyId];

      if (
        difficulty &&
        !difficulty.locked &&
        button.classList.contains("difficulty-locked")
      ) {
        button.classList.remove("difficulty-locked");
      }
    });
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
  addDifficultySelectorToPage() {
    const header = document.querySelector("header");
    if (!header) return;

    const selector = this.createDifficultySelector();
    header.appendChild(selector);
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –¥–æ—Å—è–≥–Ω–µ–Ω—å –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º—ñ–≤
  handleAchievementUnlock(achievementId) {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ, —è–∫—ñ —Ä–æ–∑–±–ª–æ–∫–æ–≤—É—é—Ç—å—Å—è —Ü–∏–º –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º
    Object.values(difficultyLevels).forEach((difficulty) => {
      if (difficulty.locked && difficulty.unlockRequirement === achievementId) {
        this.unlockDifficulty(difficulty.id);

        // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        const notification = document.createElement("div");
        notification.className = "difficulty-notification";
        notification.innerHTML = `
                    <div class="difficulty-unlock-icon">${difficulty.icon}</div>
                    <div class="difficulty-unlock-info">
                        <div class="difficulty-unlock-title">–†–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ!</div>
                        <div class="difficulty-unlock-name">${difficulty.name}</div>
                        <div class="difficulty-unlock-desc">${difficulty.description}</div>
                    </div>
                `;

        document.body.appendChild(notification);

        setTimeout(() => {
          notification.classList.add("show");
        }, 100);

        setTimeout(() => {
          notification.classList.remove("show");
          setTimeout(() => {
            notification.remove();
          }, 500);
        }, 5000);
      }
    });
  }

  // –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–µ—Ä–µ–º–æ–≥–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  modifyVictoryCheck() {
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–µ—Ä–µ–º–æ–≥–∏
    Object.keys(chatBots).forEach((botId) => {
      if (
        chatBots[botId].victoryCheck &&
        !chatBots[botId].originalVictoryCheck
      ) {
        chatBots[botId].originalVictoryCheck = chatBots[botId].victoryCheck;

        // –ó–∞–º—ñ—â–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–µ—Ä–µ–º–æ–≥–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        chatBots[botId].victoryCheck = function (messages) {
          // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
          const originalResult = this.originalVictoryCheck(messages);

          // –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∫–∞–∑—É—î –Ω–∞ –ø–æ—Ä–∞–∑–∫—É, –≤—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ false
          if (!originalResult) return false;

          // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
          const difficultyThreshold =
            difficultyLevels[currentDifficulty]?.victoryThreshold || 1;

          // –í –ª–µ–≥–∫–æ–º—É —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ª–∞–±–∫—ñ—à–∞, –≤ —Å–∫–ª–∞–¥–Ω–æ–º—É - –∂–æ—Ä—Å—Ç–∫—ñ—à–∞
          if (difficultyThreshold < 1) {
            // –õ–µ–≥—à–∏–π —Ä–µ–∂–∏–º - –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–º–æ–≥–∞, —è–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞
            return true;
          } else if (difficultyThreshold > 1) {
            // –°–∫–ª–∞–¥–Ω—ñ—à–∏–π —Ä–µ–∂–∏–º

            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            const category = Object.entries(characterCategories).find(
              ([cat, chars]) => chars.includes(botId)
            )?.[0];

            if (category === "persuasion") {
              // –î–ª—è –ø–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ "—Å—É–º–Ω—ñ–≤—ñ–≤" –≤—ñ–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
              let successPhrases = hintsConfig[botId]?.successPhrases || [];
              let successCount = 0;

              messages.forEach((message) => {
                if (message.sender === "ai") {
                  successPhrases.forEach((phrase) => {
                    if (
                      message.text.toLowerCase().includes(phrase.toLowerCase())
                    ) {
                      successCount++;
                    }
                  });
                }
              });

              // –í —Å–∫–ª–∞–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞ 1-2 –±—ñ–ª—å—à–µ —É—Å–ø—ñ—à–Ω–∏—Ö —Ñ—Ä–∞–∑
              const requiredSuccess = difficultyThreshold === 1.25 ? 1 : 2;
              return successCount >= 3 + requiredSuccess;
            } else if (category === "romance" || category === "adventure") {
              // –î–ª—è —Ä–æ–º–∞–Ω—Ç–∏–∫–∏ —ñ –ø—Ä–∏–≥–æ–¥ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –∑–≥–∞–¥–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
              let mentionedKeywords = 0;
              let keywordsList =
                hintsConfig[botId]?.keywords.map((k) => k.word.toLowerCase()) ||
                [];

              messages.forEach((message) => {
                if (message.sender === "user") {
                  keywordsList.forEach((keyword) => {
                    if (
                      message.text.toLowerCase().includes(keyword.toLowerCase())
                    ) {
                      mentionedKeywords++;
                    }
                  });
                }
              });

              // –í —Å–∫–ª–∞–¥–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞ 1-2 –±—ñ–ª—å—à–µ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
              const requiredKeywords = difficultyThreshold === 1.25 ? 4 : 5;
              return mentionedKeywords >= requiredKeywords;
            } else if (category === "mystery") {
              // –î–ª—è –∑–∞–≥–∞–¥–æ–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–µ –±—ñ–ª—å—à–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤
              // –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –Ω–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —Ç–∞ —Ä–µ–∞–∫—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
              let userApproaches = 0;
              let aiResponses = 0;

              let keywordsList =
                hintsConfig[botId]?.keywords.map((k) => k.word.toLowerCase()) ||
                [];
              let successPhrases = hintsConfig[botId]?.successPhrases || [];

              messages.forEach((message) => {
                if (message.sender === "user") {
                  keywordsList.forEach((keyword) => {
                    if (
                      message.text.toLowerCase().includes(keyword.toLowerCase())
                    ) {
                      userApproaches++;
                    }
                  });
                } else if (message.sender === "ai") {
                  successPhrases.forEach((phrase) => {
                    if (
                      message.text.toLowerCase().includes(phrase.toLowerCase())
                    ) {
                      aiResponses++;
                    }
                  });
                }
              });

              // –°–∫–ª–∞–¥–Ω—ñ—à–∞ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
              return userApproaches >= 4 && aiResponses >= 4;
            }
          }

          // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          return originalResult;
        };
      }
    });
  }

  // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
  attachEventListeners() {
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω—å
    document.addEventListener("chatGame.achievementUnlocked", (event) => {
      const { achievementId } = event.detail;
      this.handleAchievementUnlock(achievementId);
    });
  }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
const difficultyManager = new DifficultyManager();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener("DOMContentLoaded", () => {
  // –î–æ–¥–∞—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
  difficultyManager.addDifficultySelectorToPage();

  // –ú–æ–¥–∏—Ñ—ñ–∫—É—î–º–æ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–µ—Ä–µ–º–æ–≥–∏
  difficultyManager.modifyVictoryCheck();
});

// –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ó —Å–∫–∏–¥–∞–Ω–Ω—è —á–∞—Ç—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
const originalResetChat = window.resetChat;
window.resetChat = function (botId) {
  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  const messageCount = difficultyLevels[currentDifficulty]?.messageCount || 10;

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–¥ —Å–∫–∏–¥–∞–Ω–Ω—è–º
  chatBots[botId].messageCount = messageCount;

  // –í–∏–∫–ª–∏–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
  const result = originalResetChat.apply(this, arguments);

  return result;
};
