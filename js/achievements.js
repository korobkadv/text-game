/**
 * –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å –¥–ª—è —á–∞—Ç-–≥—Ä–∏
 */

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–æ—Å—è–≥–Ω–µ–Ω—å
const achievementsConfig = {
  // –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –ü–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è
  persuasion_starter: {
    id: "persuasion_starter",
    title: "–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å —É –ø–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—ñ",
    description: '–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è"',
    icon: "üó£Ô∏è",
    category: "persuasion",
    requirement: {
      type: "wins_in_category",
      category: "persuasion",
      count: 1,
    },
    reward: '–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è"',
  },
  persuasion_expert: {
    id: "persuasion_expert",
    title: "–ï–∫—Å–ø–µ—Ä—Ç –∑ –ø–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è",
    description:
      '–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ —Ç—Ä—å–æ—Ö —Ä—ñ–∑–Ω–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è"',
    icon: "üéØ",
    category: "persuasion",
    requirement: {
      type: "wins_in_category",
      category: "persuasion",
      count: 3,
    },
    reward: '–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è"',
  },
  persuasion_master: {
    id: "persuasion_master",
    title: "–ú–∞–π—Å—Ç–µ—Ä –ø–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è",
    description: '–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ –≤—Å—ñ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è"',
    icon: "üèÜ",
    category: "persuasion",
    requirement: {
      type: "wins_in_category",
      category: "persuasion",
      count: 5,
    },
    reward: '–í—ñ–¥–∫—Ä–∏–≤–∞—î —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è"',
  },

  // –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –†–æ–º–∞–Ω—Ç–∏–∫–∞
  romance_starter: {
    id: "romance_starter",
    title: "–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å —É —Ä–æ–º–∞–Ω—Ç–∏—Ü—ñ",
    description:
      '–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–†–æ–º–∞–Ω—Ç–∏–∫–∞" –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è',
    icon: "üíå",
    category: "romance",
    requirement: {
      type: "wins_in_category",
      category: "romance",
      count: 1,
    },
    reward: '–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–†–æ–º–∞–Ω—Ç–∏–∫–∞"',
  },
  romance_charmer: {
    id: "romance_charmer",
    title: "–ß–∞—Ä—ñ–≤–Ω–∏–∫ —Å–µ—Ä–¥–µ—Ü—å",
    description:
      '–ó–∞–ø—Ä–æ—Å—ñ—Ç—å —Ç—Ä—å–æ—Ö —Ä—ñ–∑–Ω–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–†–æ–º–∞–Ω—Ç–∏–∫–∞" –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è',
    icon: "üíò",
    category: "romance",
    requirement: {
      type: "wins_in_category",
      category: "romance",
      count: 3,
    },
    reward: '–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–†–æ–º–∞–Ω—Ç–∏–∫–∞"',
  },
  romance_master: {
    id: "romance_master",
    title: "–ü—ñ–¥–∫–æ—Ä—é–≤–∞—á —Å–µ—Ä–¥–µ—Ü—å",
    description:
      '–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –≤—Å—ñ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–†–æ–º–∞–Ω—Ç–∏–∫–∞" –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è',
    icon: "üíñ",
    category: "romance",
    requirement: {
      type: "wins_in_category",
      category: "romance",
      count: 5,
    },
    reward: '–í—ñ–¥–∫—Ä–∏–≤–∞—î —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–†–æ–º–∞–Ω—Ç–∏–∫–∞"',
  },

  // –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –ü—Ä–∏–≥–æ–¥–∏
  adventure_starter: {
    id: "adventure_starter",
    title: "–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å —É –ø—Ä–∏–≥–æ–¥–∞—Ö",
    description: '–ü—Ä–æ–π–¥—ñ—Ç—å –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä—ñ–π –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü—Ä–∏–≥–æ–¥–∏"',
    icon: "üó∫Ô∏è",
    category: "adventure",
    requirement: {
      type: "wins_in_category",
      category: "adventure",
      count: 1,
    },
    reward: '–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü—Ä–∏–≥–æ–¥–∏"',
  },
  adventure_explorer: {
    id: "adventure_explorer",
    title: "–î–æ—Å–ª—ñ–¥–Ω–∏–∫",
    description: '–ü—Ä–æ–π–¥—ñ—Ç—å —Ç—Ä–∏ —Ä—ñ–∑–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü—Ä–∏–≥–æ–¥–∏"',
    icon: "üß≠",
    category: "adventure",
    requirement: {
      type: "wins_in_category",
      category: "adventure",
      count: 3,
    },
    reward: '–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü—Ä–∏–≥–æ–¥–∏"',
  },
  adventure_master: {
    id: "adventure_master",
    title: "–ú–∞–π—Å—Ç–µ—Ä –ø—Ä–∏–≥–æ–¥",
    description: '–ü—Ä–æ–π–¥—ñ—Ç—å –≤—Å—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü—Ä–∏–≥–æ–¥–∏"',
    icon: "üèùÔ∏è",
    category: "adventure",
    requirement: {
      type: "wins_in_category",
      category: "adventure",
      count: 5,
    },
    reward: '–í—ñ–¥–∫—Ä–∏–≤–∞—î —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ü—Ä–∏–≥–æ–¥–∏"',
  },

  // –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –ó–∞–≥–∞–¥–∫–∏
  mystery_starter: {
    id: "mystery_starter",
    title: "–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å —É –∑–∞–≥–∞–¥–∫–∞—Ö",
    description: '–†–æ–∑–≥–∞–¥–∞–π—Ç–µ –æ–¥–Ω—É –∑–∞–≥–∞–¥–∫—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ó–∞–≥–∞–¥–∫–∏"',
    icon: "üîç",
    category: "mystery",
    requirement: {
      type: "wins_in_category",
      category: "mystery",
      count: 1,
    },
    reward: '–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ó–∞–≥–∞–¥–∫–∏"',
  },
  mystery_detective: {
    id: "mystery_detective",
    title: "–î–µ—Ç–µ–∫—Ç–∏–≤",
    description: '–†–æ–∑–≥–∞–¥–∞–π—Ç–µ —Ç—Ä–∏ —Ä—ñ–∑–Ω—ñ –∑–∞–≥–∞–¥–∫–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ó–∞–≥–∞–¥–∫–∏"',
    icon: "üïµÔ∏è",
    category: "mystery",
    requirement: {
      type: "wins_in_category",
      category: "mystery",
      count: 3,
    },
    reward: '–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ó–∞–≥–∞–¥–∫–∏"',
  },
  mystery_master: {
    id: "mystery_master",
    title: "–ú–∞–π—Å—Ç–µ—Ä –∑–∞–≥–∞–¥–æ–∫",
    description: '–†–æ–∑–≥–∞–¥–∞–π—Ç–µ –≤—Å—ñ –∑–∞–≥–∞–¥–∫–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ó–∞–≥–∞–¥–∫–∏"',
    icon: "üß©",
    category: "mystery",
    requirement: {
      type: "wins_in_category",
      category: "mystery",
      count: 5,
    },
    reward: '–í—ñ–¥–∫—Ä–∏–≤–∞—î —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ó–∞–≥–∞–¥–∫–∏"',
  },

  // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
  fast_talker: {
    id: "fast_talker",
    title: "–®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∫–æ–Ω—É–≤–∞—á",
    description:
      "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ –±—É–¥—å-—è–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –ª–∏—à–µ 5 –∞–±–æ –º–µ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
    icon: "‚ö°",
    category: "special",
    requirement: {
      type: "win_under_messages",
      count: 5,
    },
    reward: "–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
  },
  multilingual: {
    id: "multilingual",
    title: "–ü–æ–ª—ñ–≥–ª–æ—Ç",
    description: "–ü—Ä–æ–π–¥—ñ—Ç—å –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä—ñ–π —É –∫–æ–∂–Ω—ñ–π –¥–æ—Å—Ç—É–ø–Ω—ñ–π –º–æ–≤—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É",
    icon: "üåç",
    category: "special",
    requirement: {
      type: "wins_in_languages",
      count: 2, // —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞
    },
    reward: "–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–≤–Ω—ñ –æ–ø—Ü—ñ—ó",
  },
  completionist: {
    id: "completionist",
    title: "–ö–æ–ª–µ–∫—Ü—ñ–æ–Ω–µ—Ä –ø–µ—Ä–µ–º–æ–≥",
    description: "–ü–µ—Ä–µ–º–æ–∂—ñ—Ç—å —É –≤—Å—ñ—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—è—Ö –≥—Ä–∏",
    icon: "üåü",
    category: "special",
    requirement: {
      type: "total_wins",
      count: 20,
    },
    reward: "–í—ñ–¥–∫—Ä–∏–≤–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ç–∏—Ç—É–ª —É –≥—Ä—ñ",
  },
  hardcore: {
    id: "hardcore",
    title: "–•–∞—Ä–¥–∫–æ—Ä–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å",
    description: '–ü—Ä–æ–π–¥—ñ—Ç—å 5 —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ —É —Ä–µ–∂–∏–º—ñ "–°–∫–ª–∞–¥–Ω–∏–π"',
    icon: "üî•",
    category: "special",
    requirement: {
      type: "wins_in_difficulty",
      difficulty: "hard",
      count: 5,
    },
    reward: "–í—ñ–¥–∫—Ä–∏–≤–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω—É —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è",
  },
};

// –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤
const characterCategories = {
  persuasion: ["terminator", "alien", "philosopher", "dictator", "villain"],
  romance: ["date", "celebrity", "vampire", "royalty", "tsundere"],
  adventure: ["dragon", "treasure", "spaceship", "survival", "wizard"],
  mystery: ["detective", "spy", "ghost", "conspiracy", "cryptid"],
};

// –ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º–∏
class AchievementManager {
  constructor() {
    this.achievements = {};
    this.storage = "chatGameAchievements";
    this.loadAchievements();
    this.attachEventListeners();
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω—å –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
  loadAchievements() {
    const savedData = localStorage.getItem(this.storage);
    if (savedData) {
      this.achievements = JSON.parse(savedData);
    } else {
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –¥–∞–Ω–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å
      this.achievements = {
        unlocked: {},
        progress: {},
        winsInCategory: {
          persuasion: 0,
          romance: 0,
          adventure: 0,
          mystery: 0,
        },
        winsPerCharacter: {},
        totalWins: 0,
        winsByLanguage: {},
        winMessagesCount: {},
        totalMessages: 0,
        averageMessages: 0,
      };

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è –≤—Å—ñ—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å
      Object.keys(achievementsConfig).forEach((achievementId) => {
        this.achievements.progress[achievementId] = 0;
      });

      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è –≤—Å—ñ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤
      Object.values(characterCategories)
        .flat()
        .forEach((charId) => {
          this.achievements.winsPerCharacter[charId] = 0;
        });

      this.saveAchievements();
    }
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω—å –≤ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
  saveAchievements() {
    localStorage.setItem(this.storage, JSON.stringify(this.achievements));
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —ó—Ö —Å—Ç–∞—Ç—É—Å
  getAllAchievements() {
    const result = {};

    Object.keys(achievementsConfig).forEach((achievementId) => {
      const achievement = { ...achievementsConfig[achievementId] };

      // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å
      achievement.unlocked = !!this.achievements.unlocked[achievementId];
      achievement.progress = this.achievements.progress[achievementId] || 0;
      achievement.progressMax = achievement.requirement.count;
      achievement.progressPercent = Math.min(
        100,
        Math.round((achievement.progress / achievement.progressMax) * 100)
      );

      result[achievementId] = achievement;
    });

    return result;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ
  isAchievementUnlocked(achievementId) {
    return !!this.achievements.unlocked[achievementId];
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å
  getUnlockedAchievements() {
    const unlocked = {};
    Object.keys(this.achievements.unlocked).forEach((achievementId) => {
      if (
        this.achievements.unlocked[achievementId] &&
        achievementsConfig[achievementId]
      ) {
        unlocked[achievementId] = {
          ...achievementsConfig[achievementId],
          unlockDate: this.achievements.unlocked[achievementId],
        };
      }
    });
    return unlocked;
  }

  // –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
  unlockAchievement(achievementId) {
    if (
      !this.isAchievementUnlocked(achievementId) &&
      achievementsConfig[achievementId]
    ) {
      // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —è–∫ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–µ —ñ–∑ –∑–∞–∑–Ω–∞—á–µ–Ω–Ω—è–º –¥–∞—Ç–∏
      this.achievements.unlocked[achievementId] = new Date().toISOString();

      // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
      this.applyAchievementReward(achievementId);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
      this.saveAchievements();

      // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
      this.showAchievementNotification(achievementId);

      return true;
    }
    return false;
  }

  // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
  applyAchievementReward(achievementId) {
    const achievement = achievementsConfig[achievementId];
    if (!achievement) return;

    // –¢—É—Ç –ª–æ–≥—ñ–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –Ω–∞–≥–æ—Ä–æ–¥
    // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó

    console.log(`Applied reward for achievement: ${achievement.title}`);
  }

  // –ü–æ–∫–∞–∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
  showAchievementNotification(achievementId) {
    const achievement = achievementsConfig[achievementId];
    if (!achievement) return;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    const notification = document.createElement("div");
    notification.className = "achievement-notification";

    notification.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <div class="achievement-title">–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!</div>
                <div class="achievement-name">${achievement.title}</div>
                <div class="achievement-desc">${achievement.description}</div>
                <div class="achievement-reward">–ù–∞–≥–æ—Ä–æ–¥–∞: ${achievement.reward}</div>
            </div>
        `;

    // –î–æ–¥–∞—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    document.body.appendChild(notification);

    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
    setTimeout(() => {
      notification.classList.add("show");
    }, 100);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å
    setTimeout(() => {
      notification.classList.remove("show");
      setTimeout(() => {
        notification.remove();
      }, 500);
    }, 5000);
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
  updateAchievementProgress(achievementId, progress) {
    if (achievementsConfig[achievementId]) {
      this.achievements.progress[achievementId] = progress;

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ
      if (progress >= achievementsConfig[achievementId].requirement.count) {
        this.unlockAchievement(achievementId);
      }

      this.saveAchievements();
    }
  }

  // –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–º–æ–≥–∏ –≤ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
  handleVictory(characterId, messagesUsed) {
    this.achievements.totalWins++;
    this.achievements.winsPerCharacter[characterId] =
      (this.achievements.winsPerCharacter[characterId] || 0) + 1;
    this.achievements.totalMessages += messagesUsed;
    this.achievements.averageMessages =
      this.achievements.totalMessages / this.achievements.totalWins;

    this.saveAchievements();
    this.checkAchievements();
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –≤—Å—ñ—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateAchievementsProgress() {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    Object.entries(this.achievements.winsInCategory).forEach(
      ([category, wins]) => {
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å —Å—Ç–∞—Ä—Ç–µ—Ä—ñ–≤
        this.updateAchievementProgress(`${category}_starter`, wins);

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤/–¥–æ—Å–ª—ñ–¥–Ω–∏–∫—ñ–≤
        if (wins >= 1) {
          let expertId;
          if (category === "persuasion") expertId = "persuasion_expert";
          else if (category === "romance") expertId = "romance_charmer";
          else if (category === "adventure") expertId = "adventure_explorer";
          else if (category === "mystery") expertId = "mystery_detective";

          if (expertId) this.updateAchievementProgress(expertId, wins);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –º–∞–π—Å—Ç—Ä—ñ–≤
        if (wins >= 3) {
          this.updateAchievementProgress(`${category}_master`, wins);
        }
      }
    );

    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è

    // Fast Talker - –ø–µ—Ä–µ–º–æ–≥–∞ –∑ 5 –∞–±–æ –º–µ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    const fastWins = Object.values(this.achievements.winMessagesCount).filter(
      (count) => count <= 5
    ).length;
    this.updateAchievementProgress("fast_talker", fastWins > 0 ? 1 : 0);

    // Completionist - –≤—Å—ñ –ø–µ—Ä–µ–º–æ–≥–∏
    this.updateAchievementProgress(
      "completionist",
      this.achievements.totalWins
    );
  }

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
  attachEventListeners() {
    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –ø–µ—Ä–µ–º–æ–≥–∏
    document.addEventListener("chatGame.victory", (event) => {
      const { characterId, messagesUsed, difficulty, language } = event.detail;
      this.handleVictory(characterId, messagesUsed, difficulty, language);
    });
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å –ø—ñ—Å–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è
  checkAchievements(botId) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ "–ü–µ—Ä—à–∞ –ø–µ—Ä–µ–º–æ–≥–∞"
    if (!this.isAchievementUnlocked("first_victory")) {
      this.unlockAchievement("first_victory");
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ "–ú–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è"
    const victories = JSON.parse(localStorage.getItem("victories") || "{}");
    const totalVictories = Object.keys(victories).length;
    if (
      totalVictories >= 5 &&
      !this.isAchievementUnlocked("master_persuasion")
    ) {
      this.unlockAchievement("master_persuasion");
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ "–õ–µ–≥–µ–Ω–¥–∞"
    const allScenarios = [
      "terminator",
      "alien",
      "philosopher",
      "dictator",
      "villain",
      "date",
      "celebrity",
      "vampire",
      "royalty",
      "tsundere",
      "dragon",
      "treasure",
      "spaceship",
      "survival",
      "wizard",
      "detective",
      "spy",
      "ghost",
      "conspiracy",
      "cryptid",
    ];

    const allVictories = allScenarios.every((scenario) => victories[scenario]);
    if (allVictories && !this.isAchievementUnlocked("legend")) {
      this.unlockAchievement("legend");
    }
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω—å
  updateAchievementsDisplay() {
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —ó—Ö —Å—Ç–∞—Ç—É—Å
    const achievements = this.getAllAchievements();

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    const modalElement = document.createElement("div");
    modalElement.className = "achievements-modal";

    // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω—å –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    const categorizedAchievements = {
      persuasion: [],
      romance: [],
      adventure: [],
      mystery: [],
      special: [],
    };

    Object.values(achievements).forEach((achievement) => {
      if (categorizedAchievements[achievement.category]) {
        categorizedAchievements[achievement.category].push(achievement);
      }
    });

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è HTML –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    let achievementsHTML = "";

    Object.entries(categorizedAchievements).forEach(([category, items]) => {
      if (items.length > 0) {
        const categoryTitle =
          category.charAt(0).toUpperCase() + category.slice(1);

        achievementsHTML += `
          <div class="achievements-category">
            <h3 class="achievements-category-title">${categoryTitle}</h3>
            <div class="achievements-grid">
        `;

        items.forEach((achievement) => {
          const lockedClass = achievement.unlocked ? "" : "achievement-locked";

          achievementsHTML += `
            <div class="achievement-card ${lockedClass}">
              <div class="achievement-card-icon">${achievement.icon}</div>
              <div class="achievement-card-content">
                <h4 class="achievement-card-title">${achievement.title}</h4>
                <p class="achievement-card-desc">${achievement.description}</p>
                <div class="achievement-card-progress">
                  <div class="achievement-progress-bar">
                    <div class="achievement-progress-fill" style="width: ${
                      achievement.progressPercent
                    }%"></div>
                  </div>
                  <div class="achievement-progress-text">${
                    achievement.progress
                  }/${achievement.progressMax}</div>
                </div>
                ${
                  achievement.unlocked
                    ? `<div class="achievement-card-reward">–ù–∞–≥–æ—Ä–æ–¥–∞: ${achievement.reward}</div>`
                    : ""
                }
              </div>
            </div>
          `;
        });

        achievementsHTML += `
            </div>
          </div>
        `;
      }
    });

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ HTML –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    modalElement.innerHTML = `
      <div class="achievements-modal-content">
        <div class="achievements-modal-header">
          <h2>–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è</h2>
          <button class="achievements-close-btn">&times;</button>
        </div>
        <div class="achievements-modal-body">
          <div class="achievements-summary">
            <div class="achievements-total">
              <span class="achievements-total-count">${
                Object.keys(this.getUnlockedAchievements()).length
              }</span>
              <span class="achievements-total-text">/${
                Object.keys(achievementsConfig).length
              } –¥–æ—Å—è–≥–Ω–µ–Ω—å —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ</span>
            </div>
          </div>
          <div class="achievements-list">
            ${achievementsHTML}
          </div>
        </div>
      </div>
    `;

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    document.body.appendChild(modalElement);

    // –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    modalElement
      .querySelector(".achievements-close-btn")
      .addEventListener("click", () => {
        modalElement.classList.add("closing");
        setTimeout(() => {
          modalElement.remove();
        }, 300);
      });

    // –ö–ª—ñ–∫ –ø–æ–∑–∞ –≤–º—ñ—Å—Ç–æ–º –∑–∞–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    modalElement.addEventListener("click", (e) => {
      if (e.target === modalElement) {
        modalElement.classList.add("closing");
        setTimeout(() => {
          modalElement.remove();
        }, 300);
      }
    });

    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
    setTimeout(() => {
      modalElement.classList.add("active");
    }, 10);
  }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å
const achievementManager = new AchievementManager();

// –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ –≥—Ä–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–¥—ñ–π –ø–µ—Ä–µ–º–æ–≥–∏
function registerVictoryEvent(botId, messagesUsed) {
  const event = new CustomEvent("victory", {
    detail: {
      characterId: botId,
      messagesUsed: messagesUsed,
    },
  });
  document.dispatchEvent(event);
}

// –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ó showGameSummary –¥–ª—è –≤–∏–∫–ª–∏–∫—É –ø–æ–¥—ñ—ó –ø–µ—Ä–µ–º–æ–≥–∏
const originalShowGameSummary = window.showGameSummary;
window.showGameSummary = function (botId, isVictory) {
  // –í–∏–∫–ª–∏–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
  const result = originalShowGameSummary.apply(this, arguments);

  // –Ø–∫—â–æ –ø–µ—Ä–µ–º–æ–≥–∞, —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –ø–æ–¥—ñ—é
  if (isVictory) {
    const messagesUsed = MAX_MESSAGES - chatBots[botId].messageCount;

    registerVictoryEvent(botId, messagesUsed);
  }

  return result;
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener("DOMContentLoaded", () => {
  // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–æ—Å—è–≥–Ω–µ–Ω—å –±–µ–∑ –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  achievementManager.updateAchievementsProgress();
});

// –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ó —Å–∫–∏–¥–∞–Ω–Ω—è —á–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å
if (typeof window.originalResetChat === "undefined") {
  window.originalResetChat = window.resetChat;
}

window.resetChat = function (botId) {
  // –í–∏–∫–ª–∏–∫ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
  const result = window.originalResetChat.apply(this, arguments);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å –ø—ñ—Å–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è
  achievementManager.checkAchievements(botId);

  return result;
};

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –¥–æ—Å—è–≥–Ω–µ–Ω—å
 */
window.showAchievements = function () {
  const achievementsModal = document.getElementById("achievementsModal");
  achievementsModal.classList.add("active");
  updateAchievements();
};
