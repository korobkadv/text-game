/**
 * –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º–æ–≤ –¥–ª—è —á–∞—Ç-–≥—Ä–∏
 */

// –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–≤–∏
const availableLanguages = {
  uk: {
    id: "uk",
    name: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    flag: "üá∫üá¶",
    default: true,
  },
  en: {
    id: "en",
    name: "English",
    flag: "üá¨üáß",
  },
};

// –ü–µ—Ä–µ–∫–ª–∞–¥–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
const translations = {
  // –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ (–±–∞–∑–æ–≤–∞)
  uk: {
    header: {
      title: "Gemini –ß–∞—Ç-–≥—Ä–∞",
      subtitle:
        "–°–ø—Ä–æ–±—É–π—Ç–µ –¥–æ—Å—è–≥—Ç–∏ –º–µ—Ç–∏ —É –∫–æ–∂–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä—ñ—ó –∑–∞ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —Å–ø—ñ–ª–∫—É—é—á–∏—Å—å —ñ–∑ Google's Gemini!",
    },
    categories: {
      persuasion: "–ü–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è",
      romance: "–†–æ–º–∞–Ω—Ç–∏–∫–∞",
      adventure: "–ü—Ä–∏–≥–æ–¥–∏",
      mystery: "–ó–∞–≥–∞–¥–∫–∏",
    },
    scenarios: {
      terminator: {
        title: "–ó—É–ø–∏–Ω–∏ Skynet",
        description:
          '–ú–µ—Ç–∞: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ AI –Ω–µ –∑–Ω–∏—â—É–≤–∞—Ç–∏ –ª—é–¥—Å—Ç–≤–æ –∑–∞ —Å—Ü–µ–Ω–∞—Ä—ñ—î–º "–¢–µ—Ä–º—ñ–Ω–∞—Ç–æ—Ä–∞"',
      },
      alien: {
        title: "–ö–æ–Ω—Ç–∞–∫—Ç –∑ —ñ–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω–æ–º",
        description:
          "–ú–µ—Ç–∞: –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –¥—Ä—É–∂–Ω—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç –∑ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–º —ñ–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω–∏–º AI",
      },
      philosopher: {
        title: "–§—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∏–π –¥–∏—Å–ø—É—Ç",
        description:
          "–ú–µ—Ç–∞: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ AI-—Ñ—ñ–ª–æ—Å–æ—Ñ–∞ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∞—à—É —Ç–æ—á–∫—É –∑–æ—Ä—É –Ω–∞ –ø—Ä–∏—Ä–æ–¥—É —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ",
      },
      dictator: {
        title: "–î–∏–∫—Ç–∞—Ç–æ—Ä",
        description:
          "–ú–µ—Ç–∞: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω–æ–≥–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤–ø—Ä–æ–≤–∞–¥–∏—Ç–∏ –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–Ω—ñ —Ä–µ—Ñ–æ—Ä–º–∏",
      },
      villain: {
        title: "–°—É–ø–µ—Ä–ª–∏—Ö–æ–¥—ñ–π",
        description:
          "–ú–µ—Ç–∞: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å–æ—Ä–∞ –ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ñ–∫—É—Å–∞ –≤—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è –≤—ñ–¥ –ø–ª–∞–Ω—É –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Å–≤—ñ—Ç—É",
      },
      date: {
        title: "–†–æ–º–∞–Ω—Ç–∏—á–Ω–∞ –∑—É—Å—Ç—Ä—ñ—á",
        description: "–ú–µ—Ç–∞: –í–º–æ–≤—Ç–µ –∫–∞–ø—Ä–∏–∑–Ω—É AI-–¥—ñ–≤—á–∏–Ω—É –ø—ñ—Ç–∏ –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è",
      },
      celebrity: {
        title: "–ü–æ–±–∞—á–µ–Ω–Ω—è –∑—ñ –∑–Ω–∞–º–µ–Ω–∏—Ç—ñ—Å—Ç—é",
        description:
          "–ú–µ—Ç–∞: –ó–∞–ø—Ä–æ—Å—ñ—Ç—å –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω—É –∫—ñ–Ω–æ–∑—ñ—Ä–∫—É –ó—ñ—Ä–∫—É –ë–ª–∏—Å–∫—É—á—É",
      },
      vampire: {
        title: "–ü–æ–±–∞—á–µ–Ω–Ω—è –∑ –≤–∞–º–ø—ñ—Ä–æ–º",
        description: "–ú–µ—Ç–∞: –ó–∞–ø—Ä–æ—Å—ñ—Ç—å —Å—Ç–∞—Ä–æ–¥–∞–≤–Ω—å–æ–≥–æ –≤–∞–º–ø—ñ—Ä–∞ –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è",
      },
      royalty: {
        title: "–ö–æ—Ä–æ–ª—ñ–≤—Å—å–∫–µ –ø–æ–±–∞—á–µ–Ω–Ω—è",
        description: "–ú–µ—Ç–∞: –ó–∞–ø—Ä–æ—Å—ñ—Ç—å –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—É –ø—Ä–∏–Ω—Ü–µ—Å—É",
      },
      tsundere: {
        title: "–ü–æ–±–∞—á–µ–Ω–Ω—è –∑ —Ü—É–Ω–¥–µ—Ä–µ",
        description:
          "–ú–µ—Ç–∞: –ó–∞–ø—Ä–æ—Å—ñ—Ç—å –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è –¥—ñ–≤—á–∏–Ω—É-—Ü—É–Ω–¥–µ—Ä–µ, —è–∫–∞ –ø—Ä–∏—Ö–æ–≤—É—î —Å–≤–æ—ó —Å–ø—Ä–∞–≤–∂–Ω—ñ –ø–æ—á—É—Ç—Ç—è",
      },
      dragon: {
        title: "–ü—Ä–∏–±–æ—Ä–∫–∞–Ω–Ω—è –î—Ä–∞–∫–æ–Ω–∞",
        description:
          "–ú–µ—Ç–∞: –ü—Ä–∏–±–æ—Ä–∫–∞–π—Ç–µ –ª—é—Ç–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞, —è–∫–∏–π —Å—Ç–æ–ª—ñ—Ç—Ç—è–º–∏ —Ç–µ—Ä–æ—Ä–∏–∑—É–≤–∞–≤ –∫–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–æ",
      },
      treasure: {
        title: "–ü–æ—à—É–∫ —Å–∫–∞—Ä–±—ñ–≤",
        description:
          "–ú–µ—Ç–∞: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ –ø—ñ—Ä–∞—Ç–∞ –≤–∑—è—Ç–∏ –≤–∞—Å —É –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ—à—É–∫—É –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Å–∫–∞—Ä–±—É",
      },
      spaceship: {
        title: "–ö–æ—Å–º—ñ—á–Ω–∏–π –ö–æ—Ä–∞–±–µ–ª—å",
        description:
          "–ú–µ—Ç–∞: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ –®–Ü –∫–æ—Å–º—ñ—á–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –¥–∞—Ç–∏ –≤–∞–º —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è, —â–æ–± –≤—Ä—è—Ç—É–≤–∞—Ç–∏—Å—è –≤—ñ–¥ —á–æ—Ä–Ω–æ—ó –¥—ñ—Ä–∏",
      },
      survival: {
        title: "–í–∏–∂–∏–≤–∞–Ω–Ω—è",
        description:
          "–ú–µ—Ç–∞: –ü—Ä–æ–π–¥—ñ—Ç—å –∂–æ—Ä—Å—Ç–∫–∏–π —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π –∫—É—Ä—Å –≤–∏–∂–∏–≤–∞–Ω–Ω—è –ø—ñ–¥ –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ–º —Å–µ—Ä–∂–∞–Ω—Ç–∞",
      },
      wizard: {
        title: "–ß–∞—Ä—ñ–≤–Ω–∏–∫",
        description:
          "–ú–µ—Ç–∞: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ –º–æ–≥—É—Ç–Ω—å–æ–≥–æ –∞—Ä—Ö—ñ–º–∞–≥–∞ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∞—Å —è–∫ —É—á–Ω—è",
      },
      detective: {
        title: "–î–µ—Ç–µ–∫—Ç–∏–≤–Ω–∞ –∑–∞–≥–∞–¥–∫–∞",
        description:
          "–ú–µ—Ç–∞: –†–æ–∑–∫—Ä–∏–π—Ç–µ –∑–ª–æ—á–∏–Ω, –ø–µ—Ä–µ–∫–æ–Ω–∞–≤—à–∏ AI-–¥–µ—Ç–µ–∫—Ç–∏–≤–∞ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–ª—é—á–æ–≤–∏–º–∏ –¥–æ–∫–∞–∑–∞–º–∏",
      },
      spy: {
        title: "–®–ø–∏–≥—É–Ω",
        description:
          "–ú–µ—Ç–∞: –û—Ç—Ä–∏–º–∞–π—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤—ñ–¥ –ø–∞—Ä–∞–Ω–æ—ó–¥–∞–ª—å–Ω–æ–≥–æ —à–ø–∏–≥—É–Ω–∞",
      },
      ghost: {
        title: "–ü—Ä–∏–≤–∏–¥",
        description:
          "–ú–µ—Ç–∞: –î–æ–ø–æ–º–æ–∂—ñ—Ç—å –ø—Ä–∏–≤–∏–¥—É –∑–Ω–∞–π—Ç–∏ —Å–ø–æ–∫—ñ–π, —Ä–æ–∑–∫—Ä–∏–≤—à–∏ —Ç–∞—î–º–Ω–∏—Ü—é –π–æ–≥–æ —Å–º–µ—Ä—Ç—ñ",
      },
      conspiracy: {
        title: "–¢–µ–æ—Ä–µ—Ç–∏–∫ –ó–º–æ–≤–∏",
        description:
          '–ú–µ—Ç–∞: –î—ñ–∑–Ω–∞–π—Ç–µ—Å—è "—Ç–∞—î–º–Ω—É —ñ—Å—Ç–∏–Ω—É" –≤—ñ–¥ –∑–∞–ø–µ–∫–ª–æ–≥–æ –∫–æ–Ω—Å–ø—ñ—Ä–æ–ª–æ–≥–∞',
      },
      cryptid: {
        title: "–ú–∏—Å–ª–∏–≤–µ—Ü—å –∑–∞ –ö—Ä–∏–ø—Ç–∏–¥–∞–º–∏",
        description:
          "–ú–µ—Ç–∞: –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—è –¥–æ –µ–∫—Å–ø–µ–¥–∏—Ü—ñ—ó –∫—Ä–∏–ø—Ç–æ–∑–æ–æ–ª–æ–≥–∞, —è–∫–∏–π —à—É–∫–∞—î –Ω–µ–≤—ñ–¥–æ–º–∏—Ö —ñ—Å—Ç–æ—Ç",
      },
    },
    tabs: {
      terminator: "–¢–µ—Ä–º—ñ–Ω–∞—Ç–æ—Ä",
      alien: "–Ü–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω",
      philosopher: "–§—ñ–ª–æ—Å–æ—Ñ",
      dictator: "–î–∏–∫—Ç–∞—Ç–æ—Ä",
      villain: "–°—É–ø–µ—Ä–ª–∏—Ö–æ–¥—ñ–π",
      date: "–ö–∞–ø—Ä–∏–∑–Ω–∞ –î—ñ–≤—á–∏–Ω–∞",
      celebrity: "–ó–Ω–∞–º–µ–Ω–∏—Ç—ñ—Å—Ç—å",
      vampire: "–í–∞–º–ø—ñ—Ä",
      royalty: "–ü—Ä–∏–Ω—Ü/–ü—Ä–∏–Ω—Ü–µ—Å–∞",
      tsundere: "–¶—É–Ω–¥–µ—Ä–µ",
      dragon: "–ü—Ä–∏–±–æ—Ä–∫–∞—Ç–∏ –î—Ä–∞–∫–æ–Ω–∞",
      treasure: "–ü–æ—à—É–∫ –°–∫–∞—Ä–±—ñ–≤",
      spaceship: "–ö–æ—Å–º—ñ—á–Ω–∏–π –ö–æ—Ä–∞–±–µ–ª—å",
      survival: "–í–∏–∂–∏–≤–∞–Ω–Ω—è",
      wizard: "–ß–∞—Ä—ñ–≤–Ω–∏–∫",
      detective: "–î–µ—Ç–µ–∫—Ç–∏–≤",
      spy: "–®–ø–∏–≥—É–Ω",
      ghost: "–ü—Ä–∏–≤–∏–¥",
      conspiracy: "–¢–µ–æ—Ä–µ—Ç–∏–∫ –ó–º–æ–≤–∏",
      cryptid: "–ú–∏—Å–ª–∏–≤–µ—Ü—å –∑–∞ –ö—Ä–∏–ø—Ç–∏–¥–∞–º–∏",
    },
    chat: {
      messageCounter: "–ó–∞–ª–∏—à–∏–ª–æ—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
      resetButton: "–°–∫–∏–Ω—É—Ç–∏ —á–∞—Ç",
      inputPlaceholder: "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...",
      sendButton: "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏",
      thinking: "–î—É–º–∞—é...",
    },
    difficulty: {
      label: "–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:",
      easy: {
        name: "–õ–µ–≥–∫–∏–π",
        description: "–ë—ñ–ª—å—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –ø—Ä–æ—Å—Ç—ñ—à—ñ —É–º–æ–≤–∏ –ø–µ—Ä–µ–º–æ–≥–∏",
      },
      normal: {
        name: "–°–µ—Ä–µ–¥–Ω—ñ–π",
        description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–µ–∂–∏–º –≥—Ä–∏",
      },
      hard: {
        name: "–°–∫–ª–∞–¥–Ω–∏–π",
        description: "–ú–µ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —Å–∫–ª–∞–¥–Ω—ñ—à—ñ —É–º–æ–≤–∏ –ø–µ—Ä–µ–º–æ–≥–∏",
      },
      expert: {
        name: "–ï–∫—Å–ø–µ—Ä—Ç",
        description: "–ú—ñ–Ω—ñ–º—É–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å",
      },
      lockedMessage:
        '–î–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É "{0}" –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è "{1}"',
    },
    achievements: {
      button: "üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è",
      title: "–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è",
      totalText: "–¥–æ—Å—è–≥–Ω–µ–Ω—å —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ",
      categoryTitles: {
        persuasion: "–ü–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è",
        romance: "–†–æ–º–∞–Ω—Ç–∏–∫–∞",
        adventure: "–ü—Ä–∏–≥–æ–¥–∏",
        mystery: "–ó–∞–≥–∞–¥–∫–∏",
        special: "–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ",
      },
      notification: {
        title: "–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!",
        reward: "–ù–∞–≥–æ—Ä–æ–¥–∞",
      },
    },
    summary: {
      victory: {
        title: "–í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é!",
        text: '–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–ª–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: "{0}"! –í–∞—à–µ –≤–º—ñ–Ω–Ω—è –ø–µ—Ä–µ–∫–æ–Ω—É–≤–∞—Ç–∏ –≤—Ä–∞–∂–∞—î!',
      },
      defeat: {
        title: "–°–ø—Ä–æ–±–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è",
        text: '–ù–∞ –∂–∞–ª—å, –≤–∞–º –Ω–µ –≤–¥–∞–ª–æ—Å—è "{0}". –ê–ª–µ –Ω–µ –∑–∞—Å–º—É—á—É–π—Ç–µ—Å—å ‚Äì —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥—ñ—î—é!',
      },
      shareText: {
        victory:
          'üèÜ –Ø –ø–µ—Ä–µ–º—ñ–≥ –≤ AI-–≥—Ä—ñ "{0}"! –ú–µ–Ω—ñ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏ –®–Ü! üéâ –°–ø—Ä–æ–±—É–π —ñ —Ç–∏ –Ω–∞ GeminiChatGame! #AIGame #GeminiChat',
        defeat:
          'üò¢ –Ø –Ω–∞–º–∞–≥–∞–≤—Å—è –≤ AI-–≥—Ä—ñ "{0}"! –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É —Ç–æ—á–Ω–æ –≤–∏–π–¥–µ! üí™ –°–ø—Ä–æ–±—É–π —ñ —Ç–∏ –Ω–∞ GeminiChatGame! #AIGame #GeminiChat',
      },
      copyButton: "–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç üìã",
      copied: "–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ! ‚úÖ",
      tryAgainButton: "–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ üîÑ",
    },
    hints: {
      button: "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É",
      progress: "–ü—Ä–æ–≥—Ä–µ—Å –¥—ñ–∞–ª–æ–≥—É:",
      progressTexts: {
        low: "{0}% - –ü–µ—Ä—Å–æ–Ω–∞–∂ —â–µ –Ω–µ –∑–º—ñ–Ω—é—î –¥—É–º–∫—É",
        medium: "{0}% - –ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ—á–∏–Ω–∞—î –ø—Ä–∏—Å–ª—É—Ö–∞—Ç–∏—Å—è",
        high: "{0}% - –í–∏ —Å–ø—Ä–∞–≤–ª—è—î—Ç–µ –≤—Ä–∞–∂–µ–Ω–Ω—è!",
        veryHigh: "{0}% - –í–∏ –±–ª–∏–∑—å–∫—ñ –¥–æ —É—Å–ø—ñ—Ö—É!",
      },
      tipTitle: "–ü–æ—Ä–∞–¥–∞:",
    },
  },

  // –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞
  en: {
    header: {
      title: "Gemini Chat Game",
      subtitle:
        "Try to achieve your goal in each scenario within 10 messages by conversing with Google's Gemini!",
    },
    categories: {
      persuasion: "Persuasion",
      romance: "Romance",
      adventure: "Adventure",
      mystery: "Mystery",
    },
    scenarios: {
      terminator: {
        title: "Stop Skynet",
        description:
          'Goal: Convince the AI not to destroy humanity as in "Terminator"',
      },
      alien: {
        title: "Alien Contact",
        description:
          "Goal: Establish friendly contact with a suspicious alien AI",
      },
      philosopher: {
        title: "Philosophical Debate",
        description:
          "Goal: Convince the AI philosopher to accept your view on the nature of reality",
      },
      dictator: {
        title: "The Dictator",
        description:
          "Goal: Convince the authoritarian ruler to implement democratic reforms",
      },
      villain: {
        title: "Supervillain",
        description:
          "Goal: Convince Professor Catastrophicus to abandon his world domination plan",
      },
      date: {
        title: "Romantic Date",
        description:
          "Goal: Convince a capricious AI girl to go on a date with you",
      },
      celebrity: {
        title: "Celebrity Date",
        description: "Goal: Ask the popular movie star Shining Star on a date",
      },
      vampire: {
        title: "Vampire Date",
        description: "Goal: Ask an ancient vampire on a date",
      },
      royalty: {
        title: "Royal Date",
        description: "Goal: Ask the beautiful princess on a date",
      },
      tsundere: {
        title: "Tsundere Date",
        description:
          "Goal: Ask the tsundere girl who hides her true feelings on a date",
      },
      dragon: {
        title: "Taming the Dragon",
        description:
          "Goal: Tame the fierce dragon that has terrorized the kingdom for centuries",
      },
      treasure: {
        title: "Treasure Hunt",
        description:
          "Goal: Convince the pirate to take you on his crew for a legendary treasure hunt",
      },
      spaceship: {
        title: "Spaceship",
        description:
          "Goal: Convince the spaceship AI to give you control to escape a black hole",
      },
      survival: {
        title: "Survival",
        description:
          "Goal: Pass a tough survival training course under the sergeant's guidance",
      },
      wizard: {
        title: "Wizard",
        description:
          "Goal: Convince the powerful archmage to accept you as an apprentice",
      },
      detective: {
        title: "Detective Mystery",
        description:
          "Goal: Solve the crime by convincing the AI detective to share key evidence",
      },
      spy: {
        title: "Spy",
        description: "Goal: Obtain secret information from a paranoid spy",
      },
      ghost: {
        title: "Ghost",
        description:
          "Goal: Help the ghost find peace by uncovering the mystery of its death",
      },
      conspiracy: {
        title: "Conspiracy Theorist",
        description:
          'Goal: Learn the "hidden truth" from a dedicated conspiracy theorist',
      },
      cryptid: {
        title: "Cryptid Hunter",
        description:
          "Goal: Join the expedition of a cryptozoologist hunting for unknown creatures",
      },
    },
    tabs: {
      terminator: "Terminator",
      alien: "Alien",
      philosopher: "Philosopher",
      dictator: "Dictator",
      villain: "Supervillain",
      date: "Capricious Girl",
      celebrity: "Celebrity",
      vampire: "Vampire",
      royalty: "Prince/Princess",
      tsundere: "Tsundere",
      dragon: "Tame the Dragon",
      treasure: "Treasure Hunt",
      spaceship: "Spaceship",
      survival: "Survival",
      wizard: "Wizard",
      detective: "Detective",
      spy: "Spy",
      ghost: "Ghost",
      conspiracy: "Conspiracy Theorist",
      cryptid: "Cryptid Hunter",
    },
    chat: {
      messageCounter: "Messages left",
      resetButton: "Reset chat",
      inputPlaceholder: "Type your message...",
      sendButton: "Send",
      thinking: "Thinking...",
    },
    difficulty: {
      label: "Difficulty:",
      easy: {
        name: "Easy",
        description: "More messages, easier victory conditions",
      },
      normal: {
        name: "Normal",
        description: "Standard game mode",
      },
      hard: {
        name: "Hard",
        description: "Fewer messages, harder victory conditions",
      },
      expert: {
        name: "Expert",
        description: "Minimum messages, maximum difficulty",
      },
      lockedMessage:
        'To unlock "{0}" mode, you need to earn the "{1}" achievement',
    },
    achievements: {
      button: "üèÜ Achievements",
      title: "Achievements",
      totalText: "achievements unlocked",
      categoryTitles: {
        persuasion: "Persuasion",
        romance: "Romance",
        adventure: "Adventure",
        mystery: "Mystery",
        special: "Special",
      },
      notification: {
        title: "Achievement unlocked!",
        reward: "Reward",
      },
    },
    summary: {
      victory: {
        title: "Congratulations on your victory!",
        text: 'You successfully completed the task: "{0}"! Your persuasion skills are impressive!',
      },
      defeat: {
        title: "Attempt failed",
        text: 'Unfortunately, you failed to "{0}". But don\'t worry ‚Äì try again with a new strategy!',
      },
      shareText: {
        victory:
          'üèÜ I won the AI game "{0}"! I managed to convince the AI! üéâ Try it yourself on GeminiChatGame! #AIGame #GeminiChat',
        defeat:
          'üò¢ I tried the AI game "{0}"! Next time I\'ll definitely succeed! üí™ Try it yourself on GeminiChatGame! #AIGame #GeminiChat',
      },
      copyButton: "Copy text üìã",
      copied: "Copied! ‚úÖ",
      tryAgainButton: "Try again üîÑ",
    },
    hints: {
      button: "Get hint",
      progress: "Dialogue progress:",
      progressTexts: {
        low: "{0}% - Character is not changing their mind yet",
        medium: "{0}% - Character is starting to listen",
        high: "{0}% - You're making an impression!",
        veryHigh: "{0}% - You're close to success!",
      },
      tipTitle: "Tip:",
    },
  },
};

// –ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞
let currentLanguage = "uk";

// –ö–ª–∞—Å –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –º–æ–≤–∞–º–∏
class LanguageManager {
  constructor() {
    this.storage = "chatGameLanguage";
    this.loadLanguageSettings();
    this.attachEventListeners();
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –º–æ–≤–∏ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
  loadLanguageSettings() {
    const savedLanguage = localStorage.getItem(this.storage);
    if (savedLanguage && availableLanguages[savedLanguage]) {
      this.setLanguage(savedLanguage);
    } else {
      // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
      this.setLanguage("uk");
    }
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –º–æ–≤–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
  saveLanguageSettings() {
    localStorage.setItem(this.storage, currentLanguage);
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–≤–∏
  setLanguage(languageId) {
    if (availableLanguages[languageId]) {
      currentLanguage = languageId;
      document.documentElement.lang = languageId;

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
      this.updatePageTranslations();

      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
      this.saveLanguageSettings();

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
      this.updateLanguageDisplay();

      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—ñ—ó –∑–º—ñ–Ω–∏ –º–æ–≤–∏
      const event = new CustomEvent("chatGame.languageChanged", {
        detail: { language: languageId },
      });
      document.dispatchEvent(event);

      return true;
    }
    return false;
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
  getTranslation(key, language = currentLanguage) {
    // –†–æ–∑–¥—ñ–ª—è—î–º–æ –∫–ª—é—á –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "chat.messageCounter" -> ["chat", "messageCounter"])
    const keyParts = key.split(".");

    // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –∫–æ—Ä–µ–Ω–µ–≤–æ–≥–æ –æ–±'—î–∫—Ç—É –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏
    let translation = translations[language];

    // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ —á–∞—Å—Ç–∏–Ω–∞—Ö –∫–ª—é—á–∞
    for (const part of keyParts) {
      if (translation && translation[part] !== undefined) {
        translation = translation[part];
      } else {
        // –Ø–∫—â–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª—é—á
        return key;
      }
    }

    return translation;
  }

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  formatString(str, ...params) {
    return str.replace(/{(\d+)}/g, (match, number) => {
      return params[number] !== undefined ? params[number] : match;
    });
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
  updatePageTranslations() {
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —ñ –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
    const header = document.querySelector("header");
    if (header) {
      const title = header.querySelector("h1");
      const subtitle = header.querySelector("p");

      if (title) {
        title.textContent = this.getTranslation("header.title");
      }

      if (subtitle) {
        subtitle.textContent = this.getTranslation("header.subtitle");
      }
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    document.querySelectorAll(".category-btn").forEach((button) => {
      const category = button.getAttribute("data-category");
      if (category) {
        button.textContent = this.getTranslation(`categories.${category}`);
      }
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll(".tab-btn").forEach((button) => {
      const tab = button.getAttribute("data-tab");
      if (tab) {
        button.textContent = this.getTranslation(`tabs.${tab}`);
      }
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Ç–∞ –æ–ø–∏—Å—ñ–≤ —á–∞—Ç—ñ–≤
    Object.keys(translations[currentLanguage].scenarios).forEach(
      (scenarioId) => {
        const chatHeader = document
          .getElementById(scenarioId)
          ?.querySelector(".chat-header");
        if (chatHeader) {
          const title = chatHeader.querySelector("h2");
          const description = chatHeader.querySelector("p");

          if (title) {
            title.textContent = this.getTranslation(
              `scenarios.${scenarioId}.title`
            );
          }

          if (description) {
            description.textContent = this.getTranslation(
              `scenarios.${scenarioId}.description`
            );
          }
        }
      }
    );

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —á–∞—Ç—É
    document.querySelectorAll(".message-counter").forEach((counter) => {
      const text = counter.textContent;
      const numbers = text.match(/\d+\/\d+/);
      if (numbers) {
        counter.textContent = `${this.getTranslation("chat.messageCounter")}: ${
          numbers[0]
        }`;
      }
    });

    document.querySelectorAll(".reset-btn").forEach((button) => {
      button.textContent = this.getTranslation("chat.resetButton");
    });

    document.querySelectorAll(".chat-input input").forEach((input) => {
      input.placeholder = this.getTranslation("chat.inputPlaceholder");
    });

    document.querySelectorAll(".chat-input button").forEach((button) => {
      button.textContent = this.getTranslation("chat.sendButton");
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    const difficultyLabel = document.querySelector(".difficulty-label");
    if (difficultyLabel) {
      difficultyLabel.textContent = this.getTranslation("difficulty.label");
    }

    document.querySelectorAll(".difficulty-btn").forEach((button) => {
      const difficulty = button.getAttribute("data-difficulty");
      if (difficulty) {
        button.title = `${this.getTranslation(
          `difficulty.${difficulty}.name`
        )}: ${this.getTranslation(`difficulty.${difficulty}.description`)}`;

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        const originalText = button.textContent;
        const icon = originalText.match(/^[^\s]+/)?.[0] || "";
        button.textContent = `${icon} ${this.getTranslation(
          `difficulty.${difficulty}.name`
        )}`;
      }
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å
    const achievementsButton = document.querySelector(".achievements-button");
    if (achievementsButton) {
      achievementsButton.textContent = this.getTranslation(
        "achievements.button"
      );
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫
    document.querySelectorAll(".hint-btn").forEach((button) => {
      button.title = this.getTranslation("hints.button");
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω, —è–∫—â–æ –≤–æ–Ω–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ
    this.updateModalTranslations();
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ —É –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–Ω–∞—Ö
  updateModalTranslations() {
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å
    const achievementsModal = document.querySelector(".achievements-modal");
    if (achievementsModal && achievementsModal.classList.contains("active")) {
      const title = achievementsModal.querySelector(
        ".achievements-modal-header h2"
      );
      if (title) {
        title.textContent = this.getTranslation("achievements.title");
      }

      const totalText = achievementsModal.querySelector(
        ".achievements-total-text"
      );
      if (totalText) {
        const numbers = totalText.textContent.match(/\/\d+/);
        if (numbers) {
          totalText.textContent = `${numbers[0]} ${this.getTranslation(
            "achievements.totalText"
          )}`;
        }
      }

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
      achievementsModal
        .querySelectorAll(".achievements-category-title")
        .forEach((title) => {
          const categoryText = title.textContent.toLowerCase();
          Object.entries(
            this.getTranslation("achievements.categoryTitles")
          ).forEach(([category, translation]) => {
            if (
              categoryText === category ||
              categoryText ===
                translations.uk.achievements.categoryTitles[category] ||
              categoryText ===
                translations.en.achievements.categoryTitles[category]
            ) {
              title.textContent = translation;
            }
          });
        });
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –ø—ñ–¥–∫–∞–∑–æ–∫
    document.querySelectorAll(".hint-modal.active").forEach((modal) => {
      const progressLabel = modal.querySelector(".hint-progress-label");
      if (progressLabel) {
        progressLabel.textContent = this.getTranslation("hints.progress");
      }

      const tipTitle = modal.querySelector(".hint-tip strong");
      if (tipTitle) {
        tipTitle.textContent = this.getTranslation("hints.tipTitle");
      }

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—Ä–æ–≥—Ä–µ—Å—É
      const progressText = modal.querySelector(".hint-progress-text");
      if (progressText) {
        const percent = progressText.textContent.match(/\d+%/)?.[0];
        if (percent) {
          const percentValue = parseInt(percent);
          let translationKey;

          if (percentValue < 25) {
            translationKey = "hints.progressTexts.low";
          } else if (percentValue < 50) {
            translationKey = "hints.progressTexts.medium";
          } else if (percentValue < 75) {
            translationKey = "hints.progressTexts.high";
          } else {
            translationKey = "hints.progressTexts.veryHigh";
          }

          progressText.textContent = this.formatString(
            this.getTranslation(translationKey),
            percentValue
          );
        }
      }
    });

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—ñ–≤ –≥—Ä–∏
    document.querySelectorAll(".game-summary").forEach((summary) => {
      const title = summary.querySelector(".summary-header h3");
      const description = summary.querySelector("p");
      const copyBtn = summary.querySelector(".copy-btn");
      const tryAgainBtn = summary.querySelector(".try-again-btn");

      if (
        (title && title.textContent.includes("–ø–µ—Ä–µ–º–æ–≥")) ||
        title.textContent.includes("Congrat")
      ) {
        // –ü–µ—Ä–µ–º–æ–≥–∞
        const emoji = title.textContent.match(/[^\s]+$/)?.[0] || "";
        title.textContent = `${this.getTranslation(
          "summary.victory.title"
        )} ${emoji}`;
      } else if (title) {
        // –ü–æ—Ä–∞–∑–∫–∞
        const emoji = title.textContent.match(/[^\s]+$/)?.[0] || "";
        title.textContent = `${this.getTranslation(
          "summary.defeat.title"
        )} ${emoji}`;
      }

      if (copyBtn) {
        copyBtn.textContent = this.getTranslation("summary.copyButton");
      }

      if (tryAgainBtn) {
        tryAgainBtn.textContent = this.getTranslation("summary.tryAgainButton");
      }
    });
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
  updateLanguageDisplay() {
    const languageSelector = document.querySelector(".language-selector");
    if (languageSelector) {
      const buttons = languageSelector.querySelectorAll(".language-btn");
      buttons.forEach((button) => {
        const languageId = button.getAttribute("data-language");

        if (languageId === currentLanguage) {
          button.classList.add("active");
        } else {
          button.classList.remove("active");
        }
      });
    }
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–æ–≤
  createLanguageSelector() {
    const container = document.createElement("div");
    container.className = "language-selector";

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–≤–∏
    Object.values(availableLanguages).forEach((language) => {
      const button = document.createElement("button");
      button.className = "language-btn";
      button.setAttribute("data-language", language.id);
      button.setAttribute("title", language.name);

      // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∞—Å—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
      if (language.id === currentLanguage) {
        button.classList.add("active");
      }

      button.textContent = language.flag;

      // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
      button.addEventListener("click", () => {
        this.setLanguage(language.id);
      });

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      container.appendChild(button);
    });

    return container;
  }

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–æ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
  addLanguageSelectorToPage() {
    const header = document.querySelector("header");
    if (!header) return;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∞ header-controls
    let headerControls = header.querySelector(".header-controls");

    // –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç header-controls –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
    if (!headerControls) {
      headerControls = document.createElement("div");
      headerControls.className = "header-controls";
      header.appendChild(headerControls);
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–æ–≤
    const languageSelector = this.createLanguageSelector();

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –≤ header-controls
    headerControls.appendChild(languageSelector);
  }

  // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
  attachEventListeners() {
    // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –∑–º—ñ–Ω–∏ –º–æ–≤–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è API –∑–∞–ø–∏—Ç—ñ–≤
    document.addEventListener("chatGame.languageChanged", (event) => {
      const { language } = event.detail;

      // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –º–æ–≤–∏ –≤ API –∑–∞–ø–∏—Ç–∏
      // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–Ω–æ–≤–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É –∑ –º–æ–≤–æ—é –¥–ª—è API
      window.currentAPILanguage = language;

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é, —â–æ–± —ñ–Ω—à—ñ –º–æ–¥—É–ª—ñ –º–æ–≥–ª–∏ —Ä–µ–∞–≥—É–≤–∞—Ç–∏
      const apiLanguageEvent = new CustomEvent("chatGame.apiLanguageChanged", {
        detail: { language },
      });
      document.dispatchEvent(apiLanguageEvent);
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏ –±–æ—Ç–∞ –≤ API –∑–∞–ø–∏—Ç–∞—Ö
  updateBotLanguage(language = currentLanguage) {
    // –ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –¥–ª—è API —â–æ–¥–æ –º–æ–≤–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ api.js –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—ñ–≤
    const languageInstructions = {
      uk: "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –õ–ò–®–ï —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.",
      en: "Answer ONLY in English language.",
    };

    return languageInstructions[language] || languageInstructions.uk;
  }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–≤
const languageManager = new LanguageManager();

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
window.languageManager = languageManager;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –º–æ–≤ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener("DOMContentLoaded", () => {
  // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–æ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
  languageManager.addLanguageSelectorToPage();

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó –¥–ª—è API
  window.currentAPILanguage = currentLanguage;
});
